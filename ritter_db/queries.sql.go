// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package ritter_db

import (
	"context"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts(content, user_id) VALUES (?, ?)
`

type CreatePostParams struct {
	Content string
	UserID  int64
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost, arg.Content, arg.UserID)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users(nickname, passwd) VALUES (?, ?)
`

type CreateUserParams struct {
	Nickname string
	Passwd   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Nickname, arg.Passwd)
	return err
}

const getPosts = `-- name: GetPosts :many
SELECT user_id, content
    from posts
    order by createdAt
    limit ?
    offset ?
`

type GetPostsParams struct {
	Limit  int64
	Offset int64
}

type GetPostsRow struct {
	UserID  int64
	Content string
}

func (q *Queries) GetPosts(ctx context.Context, arg GetPostsParams) ([]GetPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsRow
	for rows.Next() {
		var i GetPostsRow
		if err := rows.Scan(&i.UserID, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
